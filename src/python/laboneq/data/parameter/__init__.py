# Copyright 2022 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0

from __future__ import annotations

from dataclasses import dataclass, field

from numpy.typing import ArrayLike


@dataclass
class Parameter:
    """Parent class for sweep parameters in a LabOne Q Experiment.

    Attributes:
        uid (str):
            A unique ID for the parameter. If not supplied,
            one will be automatically generated.
    """

    uid: str | None = None


@dataclass
class LinearSweepParameter(Parameter):
    """A linear sweep parameter.

    The parameter is swept through the values generated by
    `numpy.linspace(start, stop, count)`.

    Attributes:
        start (Number):
            The starting value of the parameter sweep.
        stop (Number):
            The final value of the parameter sweep.
        count (Number):
            The number of sweep steps in the parameter sweep.
        axis_name (str):
            The name of the sweep axis for this parameter used in
            the results. If this argument is not defined, the uid
            of the parameter will be used. Default `None`.
    """

    start: float | complex = None
    stop: float | complex = None
    count: int | None = None
    axis_name: str | None = None

    def __len__(self):
        return self.count


@dataclass
class SweepParameter(Parameter):
    """An arbitrary sweep parameter.

    Attributes:
        values (ArrayLike):
            An arbitrary numpy array whose values are used as the sweep
            parameter.
        axis_name (str):
            The name of the sweep axis for this parameter used in the results.
            If this argument is not defined, the uid of the parameter will be
            used. Default `None`.
        driven_by (list[SweepParameter]):
            Optional and usually absent. If given, specifies the list of
            [SweepParameter][laboneq.data.parameter.SweepParameter] objects that
            this one is derived from. See the notes below for an example.
            Parameters should have the same shape as the ones they are driven
            by. Incorrect shapes will raise a [ValueError][]. Default `None`.
    """

    values: ArrayLike = None
    axis_name: str = None
    driven_by: list[Parameter] = field(default_factory=list)

    def __len__(self):
        return len(self.values)
